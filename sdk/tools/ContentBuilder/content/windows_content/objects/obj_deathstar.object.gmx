<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_deathstar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>planetparent = 0;
alarm[0] = 5;
alarm[1] = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//remet les ship au sol
//if partir = 0 {
/*if ds_grid_get(obj_planetary.planetary,53,planetparent) &gt; 0 {// ds_grid_get(obj_planetary.planetary,53,planetparent) {
if enemy = ds_grid_get(obj_planetary.planetary,32,planetparent) {
ds_grid_add(obj_planetary.planetary,53,planetparent,-1)
ds_grid_add(obj_planetary.planetary,53+type,planetparent,-1)

}else if enemy = 0 {ds_grid_add(obj_planetary.planetary,53,planetparent,-1)

}
}*/
//show_debug_message(planetparent);
//show_debug_message(enemy);
if hp &lt;= 0 {
    if planetparent != 0 {
        //attaquant
        if ds_grid_get(obj_planetary.planetary,34,planetparent) = global.idfixe or ds_grid_get(obj_planetary.planetary,32,planetparent) &lt; 7 or ds_grid_get(obj_planetary.planetary,34,planetparent) &lt; 7 {
            with(obj_highscore){
                var hiscore_map, i, str;
                hiscore_map = ds_map_create();
                ds_map_set(hiscore_map,'cat', other.type);
                ds_map_set(hiscore_map,'owner', other.enemy);
                ds_map_set(hiscore_map,'id', other.planetparent);
                ds_map_set(hiscore_map,'cu', global.idfixe);
                str = json_encode(hiscore_map);
                ds_map_destroy(hiscore_map); 
                postDeleteShip = http_post_string(addr+"universe/deleteship" , str);
            }
            //defensseur
        }else if ds_grid_get(obj_planetary.planetary,32,planetparent) = global.idfixe or ds_grid_get(obj_planetary.planetary,32,planetparent) &lt; 7 or ds_grid_get(obj_planetary.planetary,34,planetparent) &lt; 7  {
            with(obj_highscore){
                var hiscore_map, i, str;
                hiscore_map = ds_map_create();
                ds_map_set(hiscore_map,'cat', other.type);
                ds_map_set(hiscore_map,'owner', other.enemy);
                ds_map_set(hiscore_map,'id', other.planetparent);
                ds_map_set(hiscore_map,'cu', global.idfixe);
                str = json_encode(hiscore_map);
                ds_map_destroy(hiscore_map); 
                postDeleteShip = http_post_string(addr+"universe/deleteship" , str);
            }
        }
    }
if enemy = ds_grid_get(obj_planetary.planetary,32,planetparent) {
if planetparent = obj_planetary.planetnowid {scr_addinfo2(1,7+type,planetparent)}}
repeat(1+(type*2)){
with(instance_create(
xx+random_range((-25*type)*obj_planetary.optiportabletaille,(25*type)*obj_planetary.optiportabletaille),
yy+random_range((-25*type)*obj_planetary.optiportabletaille,(25*type)*obj_planetary.optiportabletaille),obj_debris)){
size = random_range(0.3,0.5)*(1+(other.type/10))
angle = random(360)
dist = (point_distance(room_width/2,room_height/2,other.x,other.y)+random_range(-20*other.type,20*other.type))/obj_planetary.optiportabletaille
rotaplanet = (point_direction(room_width/2,room_height/2,other.x,other.y)+random_range(-1*other.type,1*other.type))-obj_planetary.rotaplanet
vitangle = random_range(0.5,1.5)
c = choose(1,2)
sub = choose(0,1,2,3,4,5)
planetparent = other.planetparent
}
}
}else{
if soute &gt; 0{
    if planetparent = 0{
    if enemy = ds_grid_get(obj_planetary.planetary,32,planetparent) {
    ds_grid_add(obj_planetary.planetary,35,planetparent,floor((soute*100)*8))
    ds_grid_add(obj_planetary.planetary,90,planetparent,floor((soute*100)))
    ds_grid_add(obj_planetary.planetary,91,planetparent,floor((soute*100)))
    ds_grid_add(obj_planetary.planetary,92,planetparent,floor((soute*100)))
    ds_grid_add(obj_planetary.planetary,93,planetparent,floor((soute*100)))
    ds_grid_add(obj_planetary.planetary,94,planetparent,floor((soute*100)))
    ds_grid_add(obj_planetary.planetary,95,planetparent,floor((soute*100)))
    ds_grid_add(obj_planetary.planetary,96,planetparent,floor((soute*100)))
    ds_grid_add(obj_planetary.planetary,97,planetparent,floor((soute*100)))
    ds_grid_add(obj_planetary.planetary,98,planetparent,floor((soute*100)))
    }
    }else{
    ds_grid_add(obj_planetary.planetary,290,planetparent,floor((soute*100)))
        
    }
}
}


if partir = 4 {}else{
//si defensseur basique
if enemy = ds_grid_get(obj_planetary.planetary,32,planetparent) or enemy = 0 {
if ds_grid_get(obj_planetary.planetary,53+type,planetparent) &gt; 0 {
ds_grid_add(obj_planetary.planetary,53+type,planetparent,-1)
ds_grid_add(obj_planetary.planetary,53,planetparent,-1)}
//si attaquant et joueur //suprimer des vaisseau de mere
}else if enemy = ds_grid_get(obj_planetary.planetary,34,planetparent) &amp;&amp; enemy = global.idfixe {
//if type = 1 or type = 2 {
if ds_grid_get(obj_planetary.planetary,53+type,0) &gt; 0 {
ds_grid_add(obj_planetary.planetary,53+type,0,-1)
ds_grid_add(obj_planetary.planetary,53,0,-1)}//}
}
}


//}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cuEvent = 0;
for (var i = 0; i &lt; 5; i += 1)
{
    global.il = i;
    if i = 0 {shipCatCreate = resultMap[? "tsc2"]}
    if i = 1 {shipCatCreate = resultMap[? "tsc3"]}
    if i = 2 {shipCatCreate = resultMap[? "tsc4"]}
    if i = 3 {shipCatCreate = resultMap[? "tsc5"]}
    if i = 4 {shipCatCreate = resultMap[? "tsc6"]}
    if i = 5 {shipCatCreate = resultMap[? "tsc7"]}
    if resultMap[? "soc"] &amp;&amp; cuEvent = 0 {//possede le ship

    }
    for (i2 = 0; i2 &lt; shipCatCreate; i2 += 1)
        {
    modeship = global.il+2;
    if obj_planetary.echelle = 0 {
        if audio_is_playing(snd_quantum){}else{
            audio_sound_gain(snd_quantum,1*obj_planetary.optiportabletaille,0)
            audio_play_sound(snd_quantum,2,false);}
    }
    with(instance_create(x,y,obj_ship)){//show_debug_message(other.buildaffect)
        attakguy = 1
        createtp = 1
        mode = other.modeship
        if obj_highscore.resultMap[? "soc"] &amp;&amp; obj_highscore.cuEvent = 0 {//possede le ship
        enemy = global.idfixe
        colorship = ds_grid_get(obj_planetary.planetary,30,0)
        obj_highscore.cuEvent = 1
        }else{
        enemy = 499
        colorship = 499
        }
        planetparent = other.planetparent
        vargetdsgrid[1] = 1;
        vargetdsgrid[2] = 1;
        vargetdsgrid[3] = 1;
        vargetdsgrid[4] = 1;
        //attaquant = 0
        }
    }
    
}
alarm[1] = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(instance_create(x,y,obj_defence)){
planetparent = other.planetparent
ausol = 1
deathstar = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_asteorid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_laser">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rocket">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
if enemy = other.enemy {}else{
if planetparent = other.planetparent {

if hpshield &gt; 0 {
if obj_planetary.echelle = 0 {
if obj_planetary.planetnowid = planetparent {
part_type_shape(obj_planetary.particlesh,pt_shape_flare);
part_type_color3(obj_planetary.particlesh,c_blue,c_blue,c_blue);//33023,255,65535);
part_type_alpha2(obj_planetary.particlesh,0.8,1);
part_type_life(obj_planetary.particlesh,8*obj_planetary.optiportabletaille,14*obj_planetary.optiportabletaille);
part_type_blend(obj_planetary.particlesh,1);
part_type_size(obj_planetary.particlesh,0.06*obj_planetary.optiportabletaille,0.1*obj_planetary.optiportabletaille,-0.001,0);//0.3,0.4,0.1,);
part_type_speed(obj_planetary.particlesh,0.3*obj_planetary.optiportabletaille,0.25*obj_planetary.optiportabletaille,-0.002,0);//,12,35,0.01,0);
part_type_direction(obj_planetary.particlesh,other.image_angle+90,other.image_angle-90,0,0);
part_particles_create(obj_planetary.Snamesh,other.x,other.y,obj_planetary.particlesh,10);}}
hpshield -= 2*other.dgt
}else{
hp -= 2*other.dgt}
if hp &lt;= 0 {
//if enemy = 1 {ds_grid_add(planetary,52,planetparent,-1)}
if ausol = 1 {
ds_grid_add(obj_planetary.planetary,269+zone,planetparent,-1)
}else{
ds_grid_add(obj_planetary.planetary,60+zone,planetparent,-1)}
//if enemy = 2 {ds_grid_add(obj_planetary.planetary,38,planetparent,-10)}//allie


if obj_planetary.echelle = 0 {
if obj_planetary.planetnowid = planetparent {
part_type_shape(obj_planetary.particle3,pt_shape_flare);
part_type_color3(obj_planetary.particle3,c_red,c_orange,c_white);//33023,255,65535);
part_type_alpha2(obj_planetary.particle3,0.8,1);
part_type_life(obj_planetary.particle3,10*1,50*1);
part_type_blend(obj_planetary.particle3,1);
part_type_size(obj_planetary.particle3,0.01*obj_planetary.optiportabletaille,0.05*obj_planetary.optiportabletaille,-0.001*obj_planetary.optiportabletaille,0);//0.3,0.4,0.1,);
part_type_speed(obj_planetary.particle3,0.1*obj_planetary.optiportabletaille,1*obj_planetary.optiportabletaille,-0.002*obj_planetary.optiportabletaille,0);//,12,35,0.01,0);
part_type_direction(obj_planetary.particle3,0,360,0,0);
part_particles_create(obj_planetary.Sname3,xx,yy,obj_planetary.particle3,150);

//ANNEAU
part_type_shape(obj_planetary.particle3,pt_shape_flare);
part_type_color3(obj_planetary.particle3,c_blue,c_white,c_blue);//33023,255,65535);
part_type_alpha2(obj_planetary.particle3,0.8,1);
part_type_life(obj_planetary.particle3,80*1,100*1);
part_type_blend(obj_planetary.particle3,1);
part_type_size(obj_planetary.particle3,0.01*obj_planetary.optiportabletaille,0.05*obj_planetary.optiportabletaille,-0.0005*obj_planetary.optiportabletaille,0);//0.3,0.4,0.1,);
part_type_speed(obj_planetary.particle3,1.9*obj_planetary.optiportabletaille,2*obj_planetary.optiportabletaille,-0.002*obj_planetary.optiportabletaille,0);//,12,35,0.01,0);
part_type_direction(obj_planetary.particle3,0,360,0,0);
part_particles_create(obj_planetary.Sname3,xx,yy,obj_planetary.particle3,150);

//explosion
part_type_shape(obj_planetary.particle3,pt_shape_explosion);
part_type_color3(obj_planetary.particle3,c_orange,c_red,c_orange);//33023,255,65535);
part_type_alpha2(obj_planetary.particle3,0.8,1);
part_type_life(obj_planetary.particle3,3*1,20*1);
part_type_blend(obj_planetary.particle3,1);
part_type_size(obj_planetary.particle3,0.1*obj_planetary.optiportabletaille,0.2*obj_planetary.optiportabletaille,-0.001*obj_planetary.optiportabletaille,0);//0.3,0.4,0.1,);
part_type_speed(obj_planetary.particle3,1.5*obj_planetary.optiportabletaille,2*obj_planetary.optiportabletaille,-0.002*obj_planetary.optiportabletaille,0);//,12,35,0.01,0);
part_type_direction(obj_planetary.particle3,0,360,0,0);
part_particles_create(obj_planetary.Sname3,xx,yy,obj_planetary.particle3,150);
}}


instance_destroy();}
with(other){instance_destroy();}
}}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_deathstar,0,x,y,1*obj_planetary.optiportabletaille,1*obj_planetary.optiportabletaille,obj_planetary.rotaplanet,ds_grid_get(obj_planetary.planetary,30,planetparent),1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
