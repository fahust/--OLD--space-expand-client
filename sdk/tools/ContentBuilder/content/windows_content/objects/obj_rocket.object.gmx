<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rocket</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 500
alarm[1] = 1
dgt = 1
vitesse = 3
fat = 1
//planetparent = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if obj_planetary.echelle = 0 {
if obj_planetary.planetnowid = planetparent {
part_type_shape(obj_planetary.particle3,pt_shape_flare);
part_type_color3(obj_planetary.particle3,c_red,c_orange,c_white);//33023,255,65535);
part_type_alpha2(obj_planetary.particle3,0.8,1);
part_type_life(obj_planetary.particle3,10*1,50*1);
part_type_blend(obj_planetary.particle3,1);
part_type_size(obj_planetary.particle3,0.01*obj_planetary.optiportabletaille,0.05*obj_planetary.optiportabletaille,-0.001*obj_planetary.optiportabletaille,0);//0.3,0.4,0.1,);
part_type_speed(obj_planetary.particle3,0.1*obj_planetary.optiportabletaille,1*obj_planetary.optiportabletaille,-0.002*obj_planetary.optiportabletaille,0);//,12,35,0.01,0);
part_type_direction(obj_planetary.particle3,0,360,0,0);
part_particles_create(obj_planetary.Sname3,x,y,obj_planetary.particle3,150);

//ANNEAU
part_type_shape(obj_planetary.particle3,pt_shape_flare);
part_type_color3(obj_planetary.particle3,c_blue,c_white,c_blue);//33023,255,65535);
part_type_alpha2(obj_planetary.particle3,0.8,1);
part_type_life(obj_planetary.particle3,80*1,100*1);
part_type_blend(obj_planetary.particle3,1);
part_type_size(obj_planetary.particle3,0.01*obj_planetary.optiportabletaille,0.05*obj_planetary.optiportabletaille,-0.0005*obj_planetary.optiportabletaille,0);//0.3,0.4,0.1,);
part_type_speed(obj_planetary.particle3,1.9*obj_planetary.optiportabletaille,2*obj_planetary.optiportabletaille,-0.002*obj_planetary.optiportabletaille,0);//,12,35,0.01,0);
part_type_direction(obj_planetary.particle3,0,360,0,0);
part_particles_create(obj_planetary.Sname3,x,y,obj_planetary.particle3,150);

//explosion
part_type_shape(obj_planetary.particle3,pt_shape_explosion);
part_type_color3(obj_planetary.particle3,c_orange,c_red,c_orange);//33023,255,65535);
part_type_alpha2(obj_planetary.particle3,0.8,1);
part_type_life(obj_planetary.particle3,3*1,20*1);
part_type_blend(obj_planetary.particle3,1);
part_type_size(obj_planetary.particle3,0.1*obj_planetary.optiportabletaille,0.2*obj_planetary.optiportabletaille,-0.001*obj_planetary.optiportabletaille,0);//0.3,0.4,0.1,);
part_type_speed(obj_planetary.particle3,1.5*obj_planetary.optiportabletaille,2*obj_planetary.optiportabletaille,-0.002*obj_planetary.optiportabletaille,0);//,12,35,0.01,0);
part_type_direction(obj_planetary.particle3,0,360,0,0);
part_particles_create(obj_planetary.Sname3,x,y,obj_planetary.particle3,150);
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////
if alarm[1] &lt; 0 {
vitesse = 3
if point_distance(x,y,room_width/2,room_height/2) &lt; ((ds_grid_get(obj_planetary.planetary,7,planetparent)/25)+30)*obj_planetary.optiportabletaille {//instance_destroy();
image_angle = point_direction(room_width/2,room_height/2,x,y)}
cible = 0
lastdist = 30000
if instance_exists(obj_ship){
with(obj_ship){
    if other.planetparent = planetparent {
    if other.enemy = enemy or enemy = 0
    or other.id = id 
    {}else{if point_distance(xx,yy,other.x,other.y) &lt; 1800*obj_planetary.optiportabletaille &amp;&amp;
    point_distance(xx,yy,other.x,other.y) &lt; other.lastdist*obj_planetary.optiportabletaille {
    other.lastdist =  point_distance(xx,yy,other.x,other.y)
    other.cible = id
    }}}}}
    
    if cible = 0 {dir = image_angle}else{
dir = point_direction(x,y,cible.x,cible.y)}
image_angle += sin(degtorad(other.dir - image_angle)) * (random_range(0.5,3)*2);
}
x += lengthdir_x(vitesse*obj_planetary.optiportabletaille,image_angle);
y += lengthdir_y(vitesse*obj_planetary.optiportabletaille,image_angle);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_laser">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.planetparent = planetparent {
if other.enemy = enemy {}else{
instance_destroy();
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(obj_planetary.surf) &amp;&amp; alarm[1] &lt; 0
   {
   image_xscale = 0.35*(obj_planetary.optiportabletaille)
   image_yscale = image_xscale
   if obj_planetary.planetnowid = planetparent &amp;&amp; obj_planetary.echelle = 0 {
   colorlaser = c_red
if enemy = global.idfixe {colorlaser = c_yellow}
if enemy = 2 {colorlaser = c_red}
if enemy = 3 {colorlaser = c_purple}
if enemy = 4 {colorlaser = c_aqua}
part_type_shape(obj_planetary.particlec,pt_shape_flare);
part_type_color3(obj_planetary.particlec,c_white,c_blue,c_white);//33023,255,65535);
part_type_alpha2(obj_planetary.particlec,0.4,0.8);
part_type_life(obj_planetary.particlec,5,10);
part_type_blend(obj_planetary.particlec,1);
part_type_size(obj_planetary.particlec,0.01*obj_planetary.optiportabletaille,0.2*obj_planetary.optiportabletaille,-0.01,0);//0.3,0.4,0.1,);
part_type_speed(obj_planetary.particlec,2,3,0,0);//,12,35,0.01,0);
part_type_direction(obj_planetary.particlec,image_angle+179,image_angle+181,0,0);
part_particles_create(obj_planetary.Snamec,x,y,obj_planetary.particlec,10);
draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,image_angle,c_red,1)
}
}


//PARTICLE


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
